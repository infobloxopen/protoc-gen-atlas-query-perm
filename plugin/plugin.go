package plugin

import (
	"fmt"
	"path/filepath"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	"github.com/gogo/protobuf/protoc-gen-gogo/generator"
	plugin "github.com/gogo/protobuf/protoc-gen-gogo/plugin"

	"github.com/infobloxopen/protoc-gen-atlas-query-validate/options"
)

const (
	filtering                          = ".infoblox.api.Filtering"
	sorting                            = ".infoblox.api.Sorting"
	fieldSelection                     = ".infoblox.api.FieldSelection"
	messagesValidationVarSuffix        = "MessagesRequireQueryValidation"
	methodFilteringVarSuffix           = "MethodsRequireFilteringValidation"
	methodSortingVarSuffix             = "MethodsRequireSortingValidation"
	methodFieldSelectionVarSuffix      = "MethodsRequireFieldSelectionValidation"
	validateFilteringMethodSuffix      = "ValidateFiltering"
	validateSortingMethodSuffix        = "ValidateSorting"
	validateFieldSelectionMethodSuffix = "ValidateFieldSelection"

	protoTypeTimestamp   = ".google.protobuf.Timestamp"
	protoTypeUUID        = ".gorm.types.UUID"
	protoTypeUUIDValue   = ".gorm.types.UUIDValue"
	protoTypeResource    = ".atlas.rpc.Identifier"
	protoTypeInet        = ".gorm.types.InetValue"
	protoTypeStringValue = ".google.protobuf.StringValue"
	protoTypeDoubleValue = ".google.protobuf.DoubleValue"
	protoTypeFloatValue  = ".google.protobuf.FloatValue"
	protoTypeInt32Value  = ".google.protobuf.Int32Value"
	protoTypeInt64Value  = ".google.protobuf.Int64Value"
	protoTypeUInt32Value = ".google.protobuf.UInt32Value"
	protoTypeUInt64Value = ".google.protobuf.UInt64Value"
)

// QueryValidatePlugin implements the plugin interface and creates validations for collection operation parameters code from .protos
type QueryValidatePlugin struct {
	*generator.Generator
	currentFile                             *generator.FileDescriptor
	messagesValidationVarName               string
	requiredFilteringValidationVarName      string
	requiredSortingValidationVarName        string
	validateFilteringMethodName             string
	validateSortingMethodName               string
	validateFieldSelectionMethodName        string
	requiredFieldSelectionValidationVarName string
}

func (p *QueryValidatePlugin) setFile(file *generator.FileDescriptor) {
	p.currentFile = file
	// p.Generator.SetFile(file.FileDescriptorProto)

	baseFileName := filepath.Base(file.GetName())
	p.messagesValidationVarName = generator.CamelCase(strings.TrimSuffix(baseFileName, filepath.Ext(baseFileName)) + messagesValidationVarSuffix)
	p.requiredFilteringValidationVarName = generator.CamelCase(strings.TrimSuffix(baseFileName, filepath.Ext(baseFileName)) + methodFilteringVarSuffix)
	p.requiredSortingValidationVarName = generator.CamelCase(strings.TrimSuffix(baseFileName, filepath.Ext(baseFileName)) + methodSortingVarSuffix)
	p.requiredFieldSelectionValidationVarName = generator.CamelCase(strings.TrimSuffix(baseFileName, filepath.Ext(baseFileName)) + methodFieldSelectionVarSuffix)
	p.validateFilteringMethodName = generator.CamelCase(strings.TrimSuffix(baseFileName, filepath.Ext(baseFileName)) + validateFilteringMethodSuffix)
	p.validateSortingMethodName = generator.CamelCase(strings.TrimSuffix(baseFileName, filepath.Ext(baseFileName)) + validateSortingMethodSuffix)
	p.validateFieldSelectionMethodName = generator.CamelCase(strings.TrimSuffix(baseFileName, filepath.Ext(baseFileName)) + validateFieldSelectionMethodSuffix)
}

// Name identifies the plugin
func (p *QueryValidatePlugin) Name() string {
	return "atlas-query-validate"
}

// Init is called once after data structures are built but before
// code generation begins.
func (p *QueryValidatePlugin) Init(g *generator.Generator) {
	p.Generator = g
}

// Generate produces the code generated by the plugin for this file,
// except for the imports, by calling the generator's methods P, In, and Out.
func (p *QueryValidatePlugin) Generate(file *generator.FileDescriptor) {
	p.setFile(file)
	p.genValidationData()
	p.genValidateFiltering()
	p.genValidateSorting()
	p.genValidateFieldSelection()
}

func (p *QueryValidatePlugin) genValidationData() {
	p.genFiltering()
	p.genSorting()
	p.genFieldSelection()
}

func (p *QueryValidatePlugin) genFiltering() {
	p.P(`var `, p.requiredFilteringValidationVarName, ` = map[string]map[string]options.FilteringOption {`)
	for _, srv := range p.currentFile.GetService() {
		for _, method := range srv.GetMethod() {
			hasFiltering := p.hasFiltering(p.ObjectNamed(method.GetInputType()).(*generator.Descriptor))
			outputMsg := p.ObjectNamed(method.GetOutputType()).(*generator.Descriptor)
			resultMsg := p.getResultMessage(outputMsg)
			if resultMsg == nil {
				resultMsg = p.getResultsMessage(outputMsg)
			}
			if hasFiltering && resultMsg != nil {
				p.P(`"`, fmt.Sprintf("/%s.%s/%s", p.currentFile.GetPackage(), srv.GetName(), method.GetName()), `": map[string]options.FilteringOption{`)
				filteringInfo := p.getFilteringData(resultMsg)
				for _, v := range filteringInfo {
					var f string
					if len(v.option.Deny) != 0 {
						for _, d := range v.option.Deny {
							f += "options.QueryValidate_" + d.String() + `,`
						}
						f = `Deny: []options.QueryValidate_FilterOperator{` + f + `},`
					}
					t := `ValueType: options.QueryValidate_` + v.option.ValueType.String()
					p.P(`"`, v.fieldName, `": options.FilteringOption{`+f+t+`},`)
				}
				p.P(`},`)
			}
		}
	}
	p.P(`}`)
}

func (p *QueryValidatePlugin) genSorting() {
	p.P(`var `, p.requiredSortingValidationVarName, ` = map[string][]string {`)
	for _, srv := range p.currentFile.GetService() {
		for _, method := range srv.GetMethod() {
			hasSorting := p.hasSorting(p.ObjectNamed(method.GetInputType()).(*generator.Descriptor))
			outputMsg := p.ObjectNamed(method.GetOutputType()).(*generator.Descriptor)
			resultMsg := p.getResultMessage(outputMsg)
			if resultMsg == nil {
				resultMsg = p.getResultsMessage(outputMsg)
			}
			if hasSorting && resultMsg != nil {
				p.P(`"`, fmt.Sprintf("/%s.%s/%s", p.currentFile.GetPackage(), srv.GetName(), method.GetName()), `": []string {`)
				sortingInfo := p.getSortingData(resultMsg)
				for _, v := range sortingInfo {
					p.P(`"`, v, `",`)
				}
				p.P(`},`)
			}
		}
	}
	p.P(`}`)
}

func (p *QueryValidatePlugin) genFieldSelection() {
	p.P(`var `, p.requiredFieldSelectionValidationVarName, ` = map[string][]string{`)
	for _, srv := range p.currentFile.GetService() {
		for _, method := range srv.GetMethod() {
			hasFieldSelection := p.hasFieldSelection(p.ObjectNamed(method.GetInputType()).(*generator.Descriptor))
			outputMsg := p.ObjectNamed(method.GetOutputType()).(*generator.Descriptor)
			resultMsg := p.getResultMessage(outputMsg)
			if resultMsg == nil {
				resultMsg = p.getResultsMessage(outputMsg)
			}
			if hasFieldSelection && resultMsg != nil {
				p.P(`"`, fmt.Sprintf("/%s.%s/%s", p.currentFile.GetPackage(), srv.GetName(), method.GetName()), `": {`)
				fields := p.getFieldSelectionData(resultMsg)
				for _, field := range fields {
					p.P(fmt.Sprintf(`"%s",`, field))
				}
				p.P(`},`)
			}
		}
	}
	p.P(`}`)
}

func (p *QueryValidatePlugin) hasFieldSelection(msg *generator.Descriptor) bool {
	for _, msgField := range msg.GetField() {
		if msgField.GetTypeName() == fieldSelection {
			return true
		}
	}
	return false
}

func (p *QueryValidatePlugin) hasFiltering(msg *generator.Descriptor) bool {
	for _, msgField := range msg.GetField() {
		if msgField.GetTypeName() == filtering {
			return true
		}
	}
	return false
}

func (p *QueryValidatePlugin) hasSorting(msg *generator.Descriptor) bool {
	for _, msgField := range msg.GetField() {
		if msgField.GetTypeName() == sorting {
			return true
		}
	}
	return false
}

func (p *QueryValidatePlugin) getResultMessage(msg *generator.Descriptor) *generator.Descriptor {
	for _, field := range msg.GetField() {
		if field.GetName() == "result" && field.GetType() == descriptor.FieldDescriptorProto_TYPE_MESSAGE && !field.IsRepeated() {
			return p.ObjectNamed(field.GetTypeName()).(*generator.Descriptor)
		}
	}
	return nil
}

func (p *QueryValidatePlugin) getResultsMessage(msg *generator.Descriptor) *generator.Descriptor {
	for _, field := range msg.GetField() {
		if field.GetName() == "results" && field.GetType() == descriptor.FieldDescriptorProto_TYPE_MESSAGE && field.IsRepeated() {
			return p.ObjectNamed(field.GetTypeName()).(*generator.Descriptor)
		}
	}
	return nil
}

type fieldValidate struct {
	fieldName string
	option    options.FilteringOption
}

func (p *QueryValidatePlugin) getFilteringData(msg *generator.Descriptor) []fieldValidate {
	var data []fieldValidate
	for _, field := range msg.GetField() {
		opts := getQueryValidationOptions(field)
		fieldName := field.GetName()
		valueType := opts.GetValueType()
		if valueType == options.QueryValidate_DEFAULT {
			if field.IsRepeated() {
				data = append(data, fieldValidate{fieldName, options.FilteringOption{ValueType: options.QueryValidate_DEFAULT, Deny: []options.QueryValidate_FilterOperator{options.QueryValidate_ALL}}})
				continue
			}

			valueType = p.getValueType(field)
			if valueType == options.QueryValidate_DEFAULT {
				if field.GetType() == descriptor.FieldDescriptorProto_TYPE_MESSAGE && opts.GetEnableNestedFields() {
					nestedMsg := p.ObjectNamed(field.GetTypeName()).(*generator.Descriptor)
					nestedDeny := p.getFilteringData(nestedMsg)
					for _, v := range nestedDeny {
						data = append(data, fieldValidate{fieldName + "." + v.fieldName, v.option})
					}
					continue
				}
				data = append(data, fieldValidate{fieldName, options.FilteringOption{ValueType: options.QueryValidate_DEFAULT, Deny: []options.QueryValidate_FilterOperator{options.QueryValidate_ALL}}})
				continue
			}

		}
		data = append(data, fieldValidate{fieldName, options.FilteringOption{ValueType: valueType, Deny: p.getDenyRules(field, valueType)}})
	}
	return data
}

func (p *QueryValidatePlugin) getValueType(field *descriptor.FieldDescriptorProto) options.QueryValidate_ValueType {
	switch field.GetType() {
	case descriptor.FieldDescriptorProto_TYPE_STRING:
		return options.QueryValidate_STRING
	case descriptor.FieldDescriptorProto_TYPE_ENUM:
		return options.QueryValidate_STRING
	case descriptor.FieldDescriptorProto_TYPE_DOUBLE,
		descriptor.FieldDescriptorProto_TYPE_FLOAT,
		descriptor.FieldDescriptorProto_TYPE_INT32,
		descriptor.FieldDescriptorProto_TYPE_INT64,
		descriptor.FieldDescriptorProto_TYPE_SINT32,
		descriptor.FieldDescriptorProto_TYPE_SINT64,
		descriptor.FieldDescriptorProto_TYPE_UINT32,
		descriptor.FieldDescriptorProto_TYPE_UINT64:
		return options.QueryValidate_NUMBER
	case descriptor.FieldDescriptorProto_TYPE_MESSAGE:
		switch field.GetTypeName() {
		case protoTypeResource,
			protoTypeTimestamp,
			protoTypeUUID,
			protoTypeUUIDValue,
			protoTypeInet,
			protoTypeStringValue:
			return options.QueryValidate_STRING
		case protoTypeDoubleValue,
			protoTypeFloatValue,
			protoTypeInt32Value,
			protoTypeInt64Value,
			protoTypeUInt32Value,
			protoTypeUInt64Value:
			return options.QueryValidate_NUMBER
		default:
			return options.QueryValidate_DEFAULT
		}
	default:
		return options.QueryValidate_DEFAULT
	}
}

func (p *QueryValidatePlugin) getSortingData(msg *generator.Descriptor) []string {
	var data []string
	for _, field := range msg.GetField() {
		opts := getQueryValidationOptions(field)
		fieldName := field.GetName()
		filterType := opts.GetValueType()
		if filterType == options.QueryValidate_DEFAULT {
			if field.IsRepeated() {
				continue
			}
			filterType = p.getValueType(field)
			if filterType == options.QueryValidate_DEFAULT {
				if field.GetType() == descriptor.FieldDescriptorProto_TYPE_MESSAGE && opts.GetEnableNestedFields() {
					nestedMsg := p.ObjectNamed(field.GetTypeName()).(*generator.Descriptor)
					nestedData := p.getSortingData(nestedMsg)
					for _, v := range nestedData {
						data = append(data, fieldName+"."+v)
					}
				}
				continue
			}

		}
		if !opts.GetSorting().GetDisable() {
			data = append(data, fieldName)
		}
	}
	return data
}

func (p *QueryValidatePlugin) getFieldSelectionData(msg *generator.Descriptor) []string {
	var data []string
	for _, field := range msg.GetField() {
		opts := getQueryValidationOptions(field)
		fieldName := field.GetName()
		valueType := opts.GetValueType()
		if valueType == options.QueryValidate_DEFAULT {
			switch field.GetType() {
			case descriptor.FieldDescriptorProto_TYPE_MESSAGE:
				switch field.GetTypeName() {
				case protoTypeResource,
					protoTypeTimestamp,
					protoTypeUUID,
					protoTypeUUIDValue,
					protoTypeInet,
					protoTypeStringValue:
				case protoTypeDoubleValue,
					protoTypeFloatValue,
					protoTypeInt32Value,
					protoTypeInt64Value,
					protoTypeUInt32Value,
					protoTypeUInt64Value:
				default:
					nestedMsg := p.ObjectNamed(field.GetTypeName()).(*generator.Descriptor)
					nested := p.getFieldSelectionData(nestedMsg)
					for _, v := range nested {
						data = append(data, fieldName+"."+v)
					}
				}
			}
		}
		data = append(data, fieldName)
	}
	return data
}

func (p *QueryValidatePlugin) getDenyRules(field *descriptor.FieldDescriptorProto, filterType options.QueryValidate_ValueType) []options.QueryValidate_FilterOperator {
	opts := getQueryValidationOptions(field)
	fieldName := field.GetName()
	opsAllowed := opts.GetFiltering().GetAllow()
	opsDenied := opts.GetFiltering().GetDeny()

	if len(opsAllowed) > 0 && len(opsDenied) > 0 {
		p.Fail(fieldName, ": both allow and deny options are not allowed")
	}

	if len(opsAllowed) == 0 && len(opsDenied) == 0 {
		return nil
	}

	var supportedOps []options.QueryValidate_FilterOperator
	if filterType == options.QueryValidate_NUMBER {
		supportedOps = []options.QueryValidate_FilterOperator{
			options.QueryValidate_EQ,
			options.QueryValidate_GT,
			options.QueryValidate_GE,
			options.QueryValidate_LT,
			options.QueryValidate_LE,
			options.QueryValidate_IN,
		}
	} else if filterType == options.QueryValidate_STRING {
		supportedOps = []options.QueryValidate_FilterOperator{
			options.QueryValidate_EQ,
			options.QueryValidate_MATCH,
			options.QueryValidate_GT,
			options.QueryValidate_GE,
			options.QueryValidate_LT,
			options.QueryValidate_LE,
			options.QueryValidate_IN,
			options.QueryValidate_IEQ,
		}
	}

	ops := opsAllowed
	if len(opsDenied) > 0 {
		ops = opsDenied
	}

	for _, item := range ops {
		var found bool
		for _, i := range supportedOps {
			if item == i {
				found = true
				break
			}
		}
		if !found && item != options.QueryValidate_ALL {
			p.Fail(fmt.Sprintf("'%s'filtering operator is not supported for fieldValidate '%s'", item, fieldName))
		}
	}

	var res []options.QueryValidate_FilterOperator
	if len(opsAllowed) > 0 {
	OUTER:
		for _, op := range supportedOps {
			found := false
			for _, allowedOp := range ops {
				if allowedOp == options.QueryValidate_ALL {
					res = nil
					break OUTER
				}
				if op == allowedOp {
					found = true
					break
				}
			}
			if !found {
				res = append(res, op)
			}
		}
	} else {
		res = ops
		for _, op := range ops {
			if op == options.QueryValidate_ALL {
				res = []options.QueryValidate_FilterOperator{options.QueryValidate_ALL}
				break
			}
		}
	}
	return res
}

func (p *QueryValidatePlugin) genValidateFiltering() {
	p.P(`func `, p.validateFilteringMethodName, `(methodName string, f *query.Filtering) error {`)
	p.P(`info, ok := `, p.requiredFilteringValidationVarName, `[methodName]`)
	p.P(`if !ok {`)
	p.P(`return nil`)
	p.P(`}`)
	p.P(`return options.ValidateFiltering(f, info)`)
	p.P(`}`)
}

func (p *QueryValidatePlugin) genValidateSorting() {
	p.P(`func `, p.validateSortingMethodName, `(methodName string, s *query.Sorting) error {`)
	p.P(`info, ok := `, p.requiredSortingValidationVarName, `[methodName]`)
	p.P(`if !ok {`)
	p.P(`return nil`)
	p.P(`}`)
	p.P(`return options.ValidateSorting(s, info)`)
	p.P(`}`)
}

func (p *QueryValidatePlugin) genValidateFieldSelection() {
	p.P(`func `, p.validateFieldSelectionMethodName, `(methodName string, s *query.FieldSelection) error {`)
	p.P(`info, ok := `, p.requiredFieldSelectionValidationVarName, `[methodName]`)
	p.P(`if !ok {`)
	p.P(`return nil`)
	p.P(`}`)
	p.P(`return options.ValidateFieldSelection(s, info)`)
	p.P(`}`)
}

func getQueryValidationOptions(field *descriptor.FieldDescriptorProto) *options.QueryValidate {
	if field.Options == nil {
		return nil
	}
	v, err := proto.GetExtension(field.Options, options.E_Validate)
	if err != nil {
		return nil
	}
	opts, ok := v.(*options.QueryValidate)
	if !ok {
		return nil
	}
	return opts
}

func (p *QueryValidatePlugin) CleanFiles(response *plugin.CodeGeneratorResponse) {
	for i := 0; i < len(response.File); i++ {
		file := response.File[i]
		file.Content = CleanImports(file.Content)
	}
}
